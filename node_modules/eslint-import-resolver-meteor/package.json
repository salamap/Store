{
  "_args": [
    [
      {
        "raw": "eslint-import-resolver-meteor@^0.4.0",
        "scope": null,
        "escapedName": "eslint-import-resolver-meteor",
        "name": "eslint-import-resolver-meteor",
        "rawSpec": "^0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "/Users/petersalama/Documents/store"
    ]
  ],
  "_from": "eslint-import-resolver-meteor@>=0.4.0 <0.5.0",
  "_id": "eslint-import-resolver-meteor@0.4.0",
  "_inCache": true,
  "_location": "/eslint-import-resolver-meteor",
  "_nodeVersion": "4.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/eslint-import-resolver-meteor-0.4.0.tgz_1491332671502_0.46416331245563924"
  },
  "_npmUser": {
    "name": "clayne",
    "email": "curtis.s.layne@gmail.com"
  },
  "_npmVersion": "4.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eslint-import-resolver-meteor@^0.4.0",
    "scope": null,
    "escapedName": "eslint-import-resolver-meteor",
    "name": "eslint-import-resolver-meteor",
    "rawSpec": "^0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-import-resolver-meteor/-/eslint-import-resolver-meteor-0.4.0.tgz",
  "_shasum": "c86863840821208cf8133c5cce51909c26a61569",
  "_shrinkwrap": null,
  "_spec": "eslint-import-resolver-meteor@^0.4.0",
  "_where": "/Users/petersalama/Documents/store",
  "author": {
    "name": "Ben Mosher",
    "url": "me@benmosher.com"
  },
  "bugs": {
    "url": "https://github.com/clayne11/eslint-import-resolver-meteor/issues"
  },
  "dependencies": {
    "object-assign": "^4.0.1",
    "resolve": "^1.1.6"
  },
  "description": "Meteor import resolution plugin for eslint-plugin-import.",
  "devDependencies": {
    "chai": "^3.4.1",
    "mocha": "^2.3.4",
    "react-dom": "^15.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c86863840821208cf8133c5cce51909c26a61569",
    "tarball": "https://registry.npmjs.org/eslint-import-resolver-meteor/-/eslint-import-resolver-meteor-0.4.0.tgz"
  },
  "gitHead": "61f76463c902b59b60ea41335345be06dfa7ad5a",
  "homepage": "https://github.com/clayne11/eslint-import-resolver-meteor",
  "keywords": [
    "eslint",
    "eslintplugin",
    "esnext",
    "modules",
    "eslint-plugin-import"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "clayne",
      "email": "curtis.s.layne@gmail.com"
    }
  ],
  "name": "eslint-import-resolver-meteor",
  "optionalDependencies": {},
  "peerDependencies": {
    "eslint-plugin-import": ">=1.4.0"
  },
  "readme": "# eslint-import-resolver-meteor\n\n[![Build Status](https://travis-ci.org/clayne11/eslint-import-resolver-meteor.svg?branch=master)](https://travis-ci.org/clayne11/eslint-import-resolver-meteor)\n\nMeteor module resolution plugin for [`eslint-plugin-import`](https://www.npmjs.com/package/eslint-plugin-import).\n\n[On npm](https://www.npmjs.com/package/eslint-import-resolver-meteor)\n\n## Installation\n\n```javascript\nnpm install --save-dev eslint eslint-plugin-import eslint-import-resolver-meteor\n```\n\nConfig is passed directly through to [`resolve`](https://www.npmjs.com/package/resolve#resolve-sync-id-opts) as options:\n\nIn your `.eslintrc.yml`:\n```yaml\nsettings:\n  import/resolver:\n    meteor:\n      extensions:\n        # if unset, default is just '.js', but it must be re-added explicitly if set\n        - .js\n        - .jsx\n        - .es6\n        - .coffee\n\n      paths:\n        # an array of absolute paths which will also be searched\n        # think NODE_PATH\n        - /usr/local/share/global_modules\n\n      # this is technically for identifying `node_modules` alternate names\n      moduleDirectory:\n\n        - node_modules # defaults to 'node_modules', but...\n        - bower_components\n\n        - project/src  # can add a path segment here that will act like\n                       # a source root, for in-project aliasing (i.e.\n                       # `import MyStore from 'stores/my-store'`)\n```\n\nor to use the default options:\n\n```yaml\nsettings:\n  import/resolver: meteor\n```\n\n## Motivations\n\nThe resolver handles Meteor specific resolutions:\n\n### Resolve `/` imports\n\nThe parent directory of the project's `.meteor` folder is used as the root for any `/` paths.\n\nExample:\n\n```javascript\n// foo.js\nimport bar from '/imports/bar'\n```\n\nwill import from `PROJECT_ROOT/imports/bar`.\n\n### Ensure client and server files are imported correctly\nFiles in a `client` folder should only be able to imported into other files in `client` folders. Likewise, files in a `server` folder should only be able to be imported into other `server` folders. This resolver checks for these cases and will not resolve files that don't follow these rules.\n\nSee the `test/paths.js` file for tests that show these rules.\n\n\n### Resolve meteor package imports\n\nThe resolver also resolves `import foo from 'meteor/foo:bar`, however this part of the resolver does not work perfectly.\n\nMeteor packages (ie `import foo from 'meteor/foo:bar'`) do not have a reliable way to access\nthe main export of a package, and in fact some packages do not even have a main module file but\nrather rely on the Meteor build system to generate an importable symbol. This happens in the case of\n`api.export('Foo')` rather than using the newer `api.mainModule('index.js')`.\n\nThe strategy for resolving a Meteor import is as follows:\n\n1. If the package is a Meteor internal package (ie `import {Meteor} from 'meteor/meteor'`) check that the package exists in `.meteor/versions` so that users don't have to import all internal packages such as Mongo and Meteor directly.\n1. If it is a user created package (ie `import {SimpleSchema} from 'meteor/aldeed:simple-schema'`) check that the package exists in `.meteor/packages`. For user created packages we enforce that if you want to `import from 'meteor/foo:bar'` a file you must `meteor add foo:bar`\n\nThis strategy is imperfect, however it is the best we can do. It leads to the following false positives:\n\n1. If you're linting inside of a Meteor package, that package will only have access to the packages that it imports\nin it's `package.js` file. You will get false positives for packages that are required by the project but not by the package.\n\nEven given these limitations, this resolver should still help significantly to lint Meteor projects.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/clayne11/eslint-import-resolver-meteor.git"
  },
  "scripts": {
    "test": "mocha",
    "test:watch": "mocha --watch"
  },
  "version": "0.4.0"
}
